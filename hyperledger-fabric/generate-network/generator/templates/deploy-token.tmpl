#!/usr/bin/env bash

export PATH=${PWD}/../bin:$PATH
export FABRIC_CFG_PATH=${PWD}/../config/

CHAINCODE_NAME=basic
CHAINCODE_LABEL=basic_1.0
CHAINCODE_PATH=../../gotoken/
CHAINCODE_LANG=golang
CHAINCODE_VERSION=1.0
CHANNEL_NAME=mychannel
SEQUENCE=1

rm -f "${CHAINCODE_LABEL}.tar.gz"

peer lifecycle chaincode package "${CHAINCODE_LABEL}.tar.gz" \
      --path "${CHAINCODE_PATH}" --lang "${CHAINCODE_LANG}" --label "${CHAINCODE_LABEL}"

echo "üì¶ –ß–µ–π–Ω–∫–æ–¥ —É–ø–∞–∫–æ–≤–∞–Ω"

{{- range $idx, $o := .Orgs }}
echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ {{ $o.MSP }}..."
export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="{{ $o.MSP }}"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/{{ $o.Domain }}/peers/peer0.{{ $o.Domain }}/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/{{ $o.Domain }}/users/Admin@{{ $o.Domain }}/msp
export CORE_PEER_ADDRESS=localhost:{{ $o.PeerPort }}
peer lifecycle chaincode install "${CHAINCODE_LABEL}.tar.gz"
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {{ $o.MSP }}"
{{- end }}


PACKAGE_ID=$(peer lifecycle chaincode queryinstalled | \
             grep "${CHAINCODE_LABEL}" | awk -F "[, ]+" '{print $3}')
echo "üì¶ Package ID: $PACKAGE_ID"


{{- range $idx, $o := .Orgs }}
echo "–û–¥–æ–±—Ä–µ–Ω–∏–µ {{ $o.MSP }}"
export CORE_PEER_LOCALMSPID="{{ $o.MSP }}"
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/{{ $o.Domain }}/users/Admin@{{ $o.Domain }}/msp
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/{{ $o.Domain }}/peers/peer0.{{ $o.Domain }}/tls/ca.crt
export CORE_PEER_ADDRESS=localhost:{{ $o.PeerPort }}
peer lifecycle chaincode approveformyorg -o localhost:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  --channelID "${CHANNEL_NAME}" --name "${CHAINCODE_NAME}" \
  --version "${CHAINCODE_VERSION}" --package-id "${PACKAGE_ID}" \
  --sequence "${SEQUENCE}" --tls \
  --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"
echo "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ {{ $o.MSP }}"
{{- end }}


peer lifecycle chaincode checkcommitreadiness \
  --channelID "${CHANNEL_NAME}" --name "${CHAINCODE_NAME}" \
  --version "${CHAINCODE_VERSION}" --sequence "${SEQUENCE}" \
  --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" \
  --output json

echo "–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–∏—Ç..."
peer lifecycle chaincode commit \
  -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com \
  --channelID "${CHANNEL_NAME}" --name "${CHAINCODE_NAME}" \
  --version "${CHAINCODE_VERSION}" --sequence "${SEQUENCE}" \
  --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" \
{{- range $idx, $o := .Orgs }}
  --peerAddresses localhost:{{ $o.PeerPort }} \
  --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/{{ $o.Domain }}/peers/peer0.{{ $o.Domain }}/tls/ca.crt" \
{{- end }}
echo "‚úÖ –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"

peer lifecycle chaincode querycommitted \
  --channelID "${CHANNEL_NAME}" --name "${CHAINCODE_NAME}" \
  --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"

echo "üéâ –ß–µ–π–Ω–∫–æ–¥ '${CHAINCODE_NAME}' —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª '${CHANNEL_NAME}'"
